<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- Spring 설정용 네임스페이스와 스키마 위치 정의. -->

    <!--    <context:component-scan base-package="com.example"/>-->
    <!-- com.example 패키지 스캔 설정. 현재 비활성화 상태. -->

    <!-- 주석 처리된 빈 설정들 -->
    <!--    <bean class="demo.Apple" id="apple"/>-->
    <!-- Apple 객체 생성 설정. -->

    <!--    <bean class="demo.Kiwi" id="kiwi"/>-->
    <!-- Kiwi 객체 생성 설정. -->

    <!--    <bean id="samsungRemote" class="test.SamsungRemote"/>-->
    <!-- SamsungRemote 객체 생성 설정. -->

    <!--    <bean id="samsungTV" class="test.SamsungTV">-->
    <!--        <constructor-arg ref="samsungRemote"/>-->
    <!--    </bean>-->
    <!-- SamsungTV 객체 생성 및 생성자 주입 설정. -->

    <!--    <bean id="lgRemote" class="test.LgRemote"/>-->
    <!-- LgRemote 객체 생성 설정. -->

    <!--    <bean id="lgTV" class="test.LgTV">-->
    <!--        <property name="remote" ref="lgRemote"/>-->
    <!--    </bean>-->
    <!-- LgTV 객체 생성 및 setter 주입 설정. -->

    <bean class="com.example.biz.common.LogAdvice" id="LogAdvice" />
    <!-- 로깅 관련 Advice 객체 생성. -->

    <bean class="com.example.biz.common.LogAdvice22" id="LogAdvice22" />
    <!-- 두 번째 로깅 Advice 객체 생성. -->

    <bean class="com.example.biz.common.ReturningAdvice" id="ra" />
    <!-- 메소드 반환 후 실행될 Advice 객체 생성. -->

    <bean class="com.example.biz.common.ThrowingAdvice" id="ta" />
    <!-- 예외 발생 시 실행될 Advice 객체 생성. -->

    <bean class="com.example.biz.common.AroundAdvice" id="aa" />
    <!-- 메소드 실행 전후에 실행될 Advice 객체 생성. -->

    <bean class="com.example.biz.common.SignUpAdvice" id="signupAdvice" />


<!--    <aop:config>-->
<!--        &lt;!&ndash; AOP 설정 시작. &ndash;&gt;-->

<!--        <aop:pointcut expression="execution(* com.example.biz..*Impl.get*(..))" id="aPointcut" />-->
<!--        &lt;!&ndash; get으로 시작하는 메소드만 대상으로 하는 포인트컷 정의. &ndash;&gt;-->

<!--        <aop:pointcut expression="execution(* com.example.biz..*Impl.*(..))" id="bPointcut" />-->
<!--        &lt;!&ndash; 모든 메소드를 대상으로 하는 포인트컷 정의. &ndash;&gt;-->

<!--        <aop:pointcut expression="execution(* com.example.biz.member.impl.*Impl.insert(..))" id="signupPointcut" />-->

<!--        <aop:aspect ref="LogAdvice">-->
<!--            <aop:before method="printLog" pointcut-ref="bPointcut" />-->
<!--        </aop:aspect>-->
<!--        &lt;!&ndash; 메소드 실행 전에 로그 출력 설정. &ndash;&gt;-->

<!--        <aop:aspect ref="LogAdvice22">-->
<!--            <aop:after method="printLog22" pointcut-ref="bPointcut" />-->
<!--        </aop:aspect>-->
<!--        &lt;!&ndash; 메소드 실행 후에 로그 출력 설정. &ndash;&gt;-->

<!--        <aop:aspect ref="ra">-->
<!--            <aop:after-returning method="printLog" pointcut-ref="aPointcut" returning="returnObj" />-->
<!--        </aop:aspect>-->
<!--        &lt;!&ndash; 메소드가 정상 반환된 후 로그 출력 설정. &ndash;&gt;-->

<!--        <aop:aspect ref="ta">-->
<!--            <aop:after-throwing method="printLog" pointcut-ref="aPointcut" throwing="exceptObj" />-->
<!--        </aop:aspect>-->
<!--        &lt;!&ndash; 메소드에서 예외 발생 시 로그 출력 설정. &ndash;&gt;-->

<!--        <aop:aspect ref="aa" order="2">-->
<!--            <aop:around method="printLog" pointcut-ref="bPointcut" />-->
<!--        </aop:aspect>-->
<!--        &lt;!&ndash; 메소드 실행 전후에 로그 출력 설정. &ndash;&gt;-->

<!--        <aop:aspect ref="signupAdvice">-->
<!--            <aop:before method="printSignupLog" pointcut-ref="signupPointcut" />-->
<!--            <aop:after method="afterSignupLog" pointcut-ref="signupPointcut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config> &ndash;&gt;-->

    <aop:aspectj-autoproxy />

<!--    <bean class="com.example.biz.common.CommonAdvice" id="commonAdvice" />-->

<!--    <aop:config>-->
<!--        &lt;!&ndash; AOP 설정 시작. &ndash;&gt;-->

<!--        <aop:pointcut expression="execution(* com.example.biz..*Impl.get*(..))" id="aPointcut" />-->
<!--        &lt;!&ndash; get으로 시작하는 메소드만 대상으로 하는 포인트컷 정의. &ndash;&gt;-->

<!--        <aop:pointcut expression="execution(* com.example.biz..*Impl.*(..))" id="bPointcut" />-->
<!--        &lt;!&ndash; 모든 메소드를 대상으로 하는 포인트컷 정의. &ndash;&gt;-->

<!--        <aop:pointcut expression="execution(* com.example.biz.member.impl.*Impl.insert(..))" id="signupPointcut" />-->
<!--        &lt;!&ndash; 회원가입 관련 메소드를 대상으로 하는 포인트컷 정의. &ndash;&gt;-->

<!--        <aop:aspect ref="commonAdvice">-->
<!--            &lt;!&ndash; Before Advice &ndash;&gt;-->
<!--            <aop:before method="beforeLog" pointcut-ref="bPointcut" />-->

<!--            &lt;!&ndash; Around Advice &ndash;&gt;-->
<!--            <aop:around method="aroundLog" pointcut-ref="bPointcut" />-->

<!--            &lt;!&ndash; After-Returning Advice &ndash;&gt;-->
<!--            <aop:after-returning method="afterReturningLog" pointcut-ref="aPointcut" returning="returnObj" />-->

<!--            &lt;!&ndash; After-Throwing Advice &ndash;&gt;-->
<!--            <aop:after-throwing method="afterThrowingLog" pointcut-ref="aPointcut" throwing="exceptObj" />-->

<!--            &lt;!&ndash; After Advice &ndash;&gt;-->
<!--            <aop:after method="printLog22" pointcut-ref="bPointcut" />-->

<!--            &lt;!&ndash; 회원가입 관련 Advice &ndash;&gt;-->
<!--            <aop:before method="beforeSignupLog" pointcut-ref="signupPointcut" />-->
<!--            <aop:after method="afterSignupLog" pointcut-ref="signupPointcut" />-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <context:component-scan base-package="com.example.biz.board.impl" />
    <!-- 게시판 관련 컴포넌트 스캔 설정. -->

    <context:component-scan base-package="com.example.biz.member.impl" />
    <!-- 회원 관련 컴포넌트 스캔 설정. -->

    <context:component-scan base-package="com.example.biz.common" />
    <!-- 공통 기능 관련 컴포넌트 스캔 설정. -->

</beans>
